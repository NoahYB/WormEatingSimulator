// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
// Create a RenderTexture with enableRandomWrite flag and set it

// with cs.SetTexture
RWTexture2D<float4> Result;

float resolution;
float n;
float t = 1;
RWStructuredBuffer<int> particleArray;


float rand(float2 co) {
    return frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453);
}


[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float x = id.x / resolution;
    float y = id.y / resolution;
    int index = id.x + id.y * resolution;
    int type = particleArray[index];
    if(type == 1)
        Result[id.xy] = float4(type, 0.0, 0.0, 0.0);
    else if (type >= 4) {
        particleArray[index] += 1;
        Result[id.xy] = float4(300 / float(type/2), 300 / float(type * 2), 0, 0);
    }
    else if (type == 2)
        Result[id.xy] = float4(0.0, 1.0, 0.0, 0.0);
    else if (type <0) {
        particleArray[index] += 1;
        Result[id.xy] = float4(0, 0, 0, 0);
    }
    else
        Result[id.xy] = float4(0.0, 0.0, 0.0, 0.0);
    t -= .001;
}
