// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct particle {
    float2 position;
    float speed;
    float heading;
    float t;
    int changeheading;
    uint foundFood;
    uint currentIndex;
    uint state;
};
RWStructuredBuffer<int> trailPositions;
RWStructuredBuffer<particle> particles;
RWStructuredBuffer<int> particleArray;

int n;
float resolution;
int size;
int trailLength;
int timeBeforeTurn;
float noseStrength;

float rand(float2 co) {
    return frac(sin(dot(co.xy, float2(3.245968465, 78.233))) * 43758.5453);
}
//has max of 4294967295.0
float hash(uint state) {
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    
    return float(state)/ 4294967295.0;
}
float2 reflect(float2 n, float2 l) {
    l = normalize(l);
    return normalize((l)-2 * dot(l, n) * n);
}
void setPosition(int position, int value, int size) {
    particleArray[position] = value;
    for (int i = 0; i < size; i++) {
        particleArray[position + resolution * i] = value;
        particleArray[position - resolution * i] = value;
        particleArray[position + i] = value;
        particleArray[position - i] = value;
        particleArray[position - resolution * i + i] = value;
        particleArray[position - resolution * i - i] = value;
        particleArray[position + resolution * i + i] = value;
        particleArray[position + resolution * i - i] = value;
    }
}
void setTrailPosition(int position, int value, int size) {

    //value = particleArray[position] < 0 ? particleArray[position] : value;

    particleArray[position] = value;

    for (int i = 0; i < size; i++) {
        particleArray[position + resolution * i] = value;
        particleArray[position - resolution * i] = value;
        particleArray[position + i] = value;
        particleArray[position - i] = value;
        particleArray[position - resolution * i + i] = value;
        particleArray[position - resolution * i - i] = value;
        particleArray[position + resolution * i + i] = value;
        particleArray[position + resolution * i - i] = value;
    }
}
float2 checkCollisions(float2 pos, float heading) {
    if (pos.y <= 0 || pos.y >= resolution) {
        return -1 * heading;
    }
    return heading;
}

bool smell(float2 pos) {
    const float angle = 3.14159265358979 * 2 / 4;
    float d = 0;
    float2 ogPos = pos;
    for (int j = 0; j < 4; j++) {
        float2 direction = normalize(float2(cos(d), sin(d)));
        pos += direction * size;
        if (particleArray[int(pos.x) + int(pos.y) * resolution] == 2) {
            return true;
        }
        d += angle;
        pos = ogPos;
    }
    return false;
}
float followtrail(float2 pos, float heading) {
    const float angle = 3.14159265358979 * 2 / 8;
    float d = 0;
    float2 ogPos = pos;
    int largest = -1000000000;
    float picked = heading;
    for (int j = 0; j < 8; j++) {
        float2 direction = normalize(float2(cos(d), sin(d)));
        for (float i = 0; i < resolution* noseStrength; i += .01f) {
            pos += direction * i;
            if (particleArray[int(pos.x) + int(pos.y) * resolution] < 0 &&
                particleArray[int(pos.x) + int(pos.y) * resolution] > largest) {
                largest = particleArray[int(pos.x) + int(pos.y) * resolution];
                picked = d;
            }  
        }
        d += angle;
        pos = ogPos;
    }
    return picked;
}


float probe(float2 pos, float heading, float length, float spreadAngle) {
    float2 ogPos = pos;
    int senseIntegerPosition = 0;
    heading = heading - spreadAngle;
    for (int j = 0; j < 3; j++) {
        
        float2 direction = normalize(float2(cos(heading), sin(heading)));
        for (float i = 0; i < length; i += .01f) {
            pos += direction * i;
            senseIntegerPosition = int(pos.x) + int(pos.y) * resolution;
            if (particleArray[senseIntegerPosition] == 2 || particleArray[senseIntegerPosition] == 3) {
                return spreadAngle;
            }
        }
        heading += spreadAngle;
        pos = ogPos;
    }
    return -1000;
}
float2 posFromIndex(int pos) {
    return float2(resolution % (pos), float(pos) % resolution);
}
void updateTrailPositions(int l, int value, uint currentIndex, int size) {
    int index = l * trailLength + currentIndex;
    trailPositions[index] = value;
}
void makeFoodTrail(int l, int size) {
    int index = l * trailLength;
    for (int i = index; i < index + trailLength; i++) {
        particleArray[trailPositions[i]] -= 100;
        for (int p = 0; p < size; p++) {
            particleArray[trailPositions[i] + resolution * p] -= 100;
            particleArray[trailPositions[i] - resolution * p] -= 100;
            particleArray[trailPositions[i] + p] = -3;
            particleArray[trailPositions[i] - p] = -3;
            particleArray[trailPositions[i] - resolution * p + p] -= 100;
            particleArray[trailPositions[i] - resolution * p - p] -= 100;
            particleArray[trailPositions[i] + resolution * p + p] -= 100;
            particleArray[trailPositions[i] + resolution * p - p] -= 100;
        }
    }
}

//FUNCTIONS TO HELP WITH CONDITIONALS
//http://theorangeduck.com/page/avoiding-shader-conditionals
float4 when_eq(float x, float y) {
    return 1.0 - abs(sign(x - y));
}

[numthreads(64, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    //get index of current particle
    int i = id.x;
    //get variables attatched to particle
    float t = particles[i].t;
    float2 pos = particles[i].position;
    float heading = particles[i].heading;
    float speed = particles[i].speed;
    //get direction
    float2 direction = normalize(float2(cos(heading), sin(heading)));
    //get position in texture
    int integerPosition = int(pos.x) + int(pos.y) * resolution;
    if (smell(pos)) {
        particles[i].speed = 0;
        particles[i].foundFood = 1;
    }
    else {
        particles[i].foundFood = 0;
    }
    //set old position to trail color
    updateTrailPositions(i, integerPosition, particles[i].currentIndex,size);
    particles[i].currentIndex += 1;
    particles[i].currentIndex = particles[i].currentIndex % trailLength;
    if (particles[i].foundFood == 1) {
        setTrailPosition(integerPosition, 4, size);
        makeFoodTrail(i, size);
    }
    else
        setTrailPosition(integerPosition, 4, size);

    //apply transformation
    pos += direction * speed;
    //get new position in texture
    int newIntegerPosition = int(pos.x) + int(pos.y) * resolution;
    //check for collisions
    particles[i].heading = checkCollisions(pos,heading);
    //check for food at position
    float2 foodPosition = probe(pos, heading, 4, 0.261799);
    //set new position in texture
    setPosition(newIntegerPosition, 1.0, size);
    //update heading
    float headingModifier = hash(pos.y * resolution + pos.x + hash(i));

    if (headingModifier > .7)
        headingModifier = 3.14159265358979 / 4 * -1.0 * headingModifier;
    else
        headingModifier = 3.14159265358979 / 4 * headingModifier;

    heading += headingModifier
        * when_eq(fmod(particles[i].changeheading, timeBeforeTurn),0);

    //heading = headingModifier > 0 ? foodPosition : heading;
    heading = followtrail(pos,heading);
    particles[i].heading = heading;
    //update position time and heading of particle
    particles[i].position = pos;
    particles[i].t = max(0, t - .000002);
    particles[i].changeheading += 1;
}